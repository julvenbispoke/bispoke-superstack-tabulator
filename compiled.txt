function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
const DOMO = {
  context: null,
  addQuery: "",
  addColumn: "",
  columns: ['Ordered Units - MFG', 'Units Ordered', 'Shipped Units - SRC', 'Foreign - Ordered Product Sales (OPS)', 'Foreign - Ordered Revenue - MFG', 'Foreign - Shipped COGS - SRC', 'Ordered Product Sales (OPS)', 'Ordered Revenue - MFG', 'Product Name', 'Sessions', 'Glance Views', 'Date String', "SKU", "Client SKU", "Client Title", "Data Type ID", "Product ID", "(Child) ASIN"],
  getEnv: function () {
    var _ref = _asyncToGenerator(function* () {
      let env = null;
      try {
        env = domo.env;
      } catch (err) {
        env = false;
      }
      // console.log(env)
      return env;
    });
    return function getEnv() {
      return _ref.apply(this, arguments);
    };
  }(),
  getColumns: function () {
    var _ref2 = _asyncToGenerator(function* () {
      let data = yield domo.post('/sql/v1/dataset0', `SELECT * from dataset0 limit 1`, {
        contentType: 'text/plain'
      });
      console.log({
        getColumns: data
      });
      return data;
    });
    return function getColumns() {
      return _ref2.apply(this, arguments);
    };
  }(),
  getClientTitles: function () {
    var _ref3 = _asyncToGenerator(function* () {
      let client = [];
      let sql = `SELECT "Product ID" FROM dataset0 ${DOMO.addQuery} GROUP BY "Product ID"`;
      // console.log({sql})

      let data = yield domo.post('/sql/v1/dataset0', sql, {
        contentType: 'text/plain'
      });
      console.log({
        getClientTitles: data
      });
      data = data.rows.map(x => x[0]);
      // client = data.rows.map( x => x[2]).filter( x => x != '')	
      client = data.filter(x => ![undefined, null, ""].includes(x));
      console.log({
        client,
        sql
      });
      return client;
    });
    return function getClientTitles() {
      return _ref3.apply(this, arguments);
    };
  }(),
  getYearData: function () {
    var _ref4 = _asyncToGenerator(function* (value) {
      // let url = `/data/v1/dataset0?fields=${DOMO.columns.join(",")}&filter='SKU'=='${value}'`
      // // let url = `/data/v1/dataset0?fields=${DOMO.columns.join(",")}&filter='Product ID'==${value}`
      // let url = `/data/v1/dataset0?fields=${DOMO.columns.join(",")}&filter=Product ID in [${value.map(x => `'${x}'`).join(",")}]`
      // console.log({url})
      // let resp = await domo.get(url)
      // console.log({clientList: value})
      let sql = `SELECT 
					${DOMO.columns.map(x => `"${x}"`).join(",")} 
					FROM 
					dataset0 
					WHERE "Product ID" IN (${value.map(x => `'${x}'`).join(",")}) 
					AND "Data Type ID" IN (1,6) `;
      sql = sql.replaceAll("\n", " ").replaceAll("\t", "");
      // console.log({clientList: value, query: sql})	
      let resp = yield domo.post('/sql/v1/dataset0', sql, {
        contentType: 'text/plain'
      });
      console.log({
        dataColumns: resp.columns
      });
      let dataArr = [];
      resp.rows.forEach((x, i) => {
        let dataObj = {};
        x.forEach((xx, ii) => {
          dataObj[resp.columns[ii]] = ["DOUBLE", "LONG"].includes(resp.metadata[ii].type) && resp.columns[ii] != "Product ID" ? Number(xx) : xx;
        });
        dataArr.push(dataObj);
      });
      resp = dataArr;

      // resp = resp.filter( x => x["Product ID"] != "")
      // console.log({resp})
      return resp;

      // let data = []
      //  data = resp.sort(function(a,b){
      //     return new Date(b['Date String']) - new Date(a['Date String']);
      // });
      // console.log({data})
      // return data
    });
    return function getYearData(_x) {
      return _ref4.apply(this, arguments);
    };
  }(),
  onFilterUpdate: function () {
    var _ref5 = _asyncToGenerator(function* (getClientList, setData, filterUpdates) {
      domo.onFiltersUpdate(e => {
        let operandWord = ["GREATER_THAN", "GREAT_THAN_EQUALS_TO", "LESS_THAN", "LESS_THAN_EQUALS_TO", "BETWEEN", "EQUALS", "NOT_EQUALS", "IN"];
        let operandSql = [">", ">=", "<", "<=", "BETWEEN", "=", "<>", "IN"];
        let includeList = [];
        let queryList = [];
        let columnList = [];
        if (e.length == 0) {
          console.log("no filters");
          DOMO.addQuery = "";
          DOMO.addColumn = "";
          // getClientList()
          filterUpdates();
          return;
        }
        e.forEach(x => {
          let operand = -1;
          operandWord.forEach((xx, ii) => {
            if (xx == x.operand) operand = ii;
          });
          let formatValue = x.values;
          if (x.operand == "IN") {
            formatValue = `${typeof x.values == "object" ? `(${x.values.map(xxx => typeof xxx == 'string' ? `'${xxx}'` : xxx).join(",")})` : x.values}`;
          }
          if (x.operand == "BETWEEN") {
            formatValue = `${x.values[0]} AND ${x.values[1]}`;
          }
          queryList.push(`"${x.column}" ${operandSql[operand]} ${formatValue}`);
          columnList.push(x.column);
          // console.log({operand, word: x.operand, sql: operandSql[operand], formatValue, values: x.values})
        });

        // console.log(queryList.join(" AND "), e)
        queryList = queryList.join(" AND ");
        DOMO.addQuery = `WHERE ${queryList}`;
        DOMO.addColumn = (() => {
          let columnString = "";
          if (columnList.length > 0) {
            columnString = `,${columnList.map(x => `"${x}"`).join(",")}`;
          }
          return columnList;
        })();
        // getClientList()
        filterUpdates();
      });
      return;
    });
    return function onFilterUpdate(_x2, _x3, _x4) {
      return _ref5.apply(this, arguments);
    };
  }()
};
const valueCalculator = (field, dataset, week, context) => {
  if (field == '' || dataset == null) {
    return '';
  }
  const {
    vendor,
    currency
  } = context;

  // console.log({ vendor, currency})

  dataset = dataset.filter(x => {
    let date = week;
    let date1 = new Date(date),
      from = new Date(date).getTime();
    let to = new Date(date1.setDate(date1.getDate() + 7)).getTime();
    let xdate = new Date(x["Date String"]).getTime();
    if (isNaN(xdate)) return false;

    // console.log({from, to, xdate, in: xdate >= from && xdate <= to})
    return from <= xdate && to >= xdate;
  });

  // console.log({field, dataset, week, vendor})	

  if (field == 'units') {
    let val1 = 0,
      val2 = 0;
    if (!vendor) {
      // console.log({field, currency, vendor})
      val1 = dataset.map(x => x['Units Ordered'] ? x['Units Ordered'] : 0);
      val2 = dataset.map(x => x['Ordered Units - MFG'] ? x['Ordered Units - MFG'] : 0);
    }
    if (vendor) {
      // console.log({field, currency, vendor})
      val1 = dataset.map(x => x['Units Ordered'] ? x['Units Ordered'] : 0);
      val2 = dataset.map(x => x['Ordered Units - MFG'] ? x['Shipped Units - SRC'] : 0);
    }
    val1 = val1.reduce((partialSum, a) => partialSum + a, 0);
    val2 = val2.reduce((partialSum, a) => partialSum + a, 0);

    // console.log({field,val1, val2, sum: val1+ val2, week})

    return val1 + val2;
  }
  if (field == 'sales') {
    let val1 = 0,
      val2 = 0;
    if (!currency && !vendor) {
      val1 = dataset.map(x => x['Foreign - Ordered Product Sales (OPS)'] ? x['Foreign - Ordered Product Sales (OPS)'] : 0);
      val2 = dataset.map(x => x['Foreign - Ordered Revenue - MFG'] ? x['Foreign - Ordered Revenue - MFG'] : 0);
    }
    if (currency && !vendor) {
      val1 = dataset.map(x => x['Foreign - Ordered Product Sales (OPS)'] ? x['Foreign - Ordered Product Sales (OPS)'] : 0);
      val2 = dataset.map(x => x['Foreign - Shipped COGS - SRC'] ? x['Foreign - Shipped COGS - SRC'] : 0);
    }
    if (currency && vendor) {
      val1 = dataset.map(x => x['Ordered Product Sales (OPS)'] ? x['Ordered Product Sales (OPS)'] : 0);
      val2 = dataset.map(x => x['Ordered Revenue - MFG'] ? x['Ordered Revenue - MFG'] : 0);
    }
    if (!currency && vendor) {
      val1 = dataset.map(x => x['Ordered Product Sales (OPS)'] ? x['Ordered Product Sales (OPS)'] : 0);
      val2 = dataset.map(x => x['Shipped COGS - SRC'] ? x['Shipped COGS - SRC'] : 0);
    }
    val1 = val1.reduce((partialSum, a) => partialSum + a, 0);
    val2 = val2.reduce((partialSum, a) => partialSum + a, 0);

    // console.log({field,val1, val2, sum: val1+ val2})
    return val1 + val2;
  }
  if (field == 'sessions') {
    let val1 = dataset.map(x => x['Sessions'] ? x['Sessions'] : 0),
      val2 = dataset.map(x => x['Glance Views'] ? x['Glance Views'] : 0);
    val1 = val1.reduce((partialSum, a) => partialSum + a, 0);
    val2 = val2.reduce((partialSum, a) => partialSum + a, 0);

    // console.log({field,val1, val2, sum: val1+ val2})
    return val1 + val2;
  }
  if (field == 'cvr') {
    let dividen = {
      val1: 0,
      val2: 0,
      sum: 0
    };
    let divisor = {
      val1: 0,
      val2: 0,
      sum: 0
    };
    dividen.val1 = dataset.map(x => x['Units Ordered'] ? x['Units Ordered'] : 0);
    dividen.val2 = dataset.map(x => x['Ordered Units - MFG'] ? x['Ordered Units - MFG'] : 0);
    divisor.val1 = dataset.map(x => x['Sessions'] ? x['Sessions'] : 0);
    divisor.val2 = dataset.map(x => x['Glance Views'] ? x['Glance Views'] : 0);
    dividen.val1 = dividen.val1.reduce((partialSum, a) => partialSum + a, 0);
    dividen.val2 = dividen.val2.reduce((partialSum, a) => partialSum + a, 0);
    divisor.val1 = divisor.val1.reduce((partialSum, a) => partialSum + a, 0);
    divisor.val2 = divisor.val2.reduce((partialSum, a) => partialSum + a, 0);
    dividen.sum = dividen.val1 + dividen.val2;
    divisor.sum = divisor.val1 + divisor.val2;

    // return `${dividen.sum} / ${divisor.sum}`
    // console.log({field, dividen, divisor, product: dividen.sum/divisor.sum})
    return isFinite(dividen.sum / divisor.sum) ? dividen.sum / divisor.sum : "";
  }
};
const grandTotal = (field, data) => {
  if (field == 'units') {}
  if (field == 'sales') {}
  if (field == 'sessions') {}
  if (field == 'cvr') {}
};
const AppContext = React.createContext();
const AppContextProvider = ({
  children
}) => {
  const {
    useState,
    useEffect
  } = React;
  const [test] = useState('test');
  const [env, setEnv] = useState(null);
  const [clients, setClients] = useState([]);
  const [data, setData] = useState([]);
  const [dataHistory, setDataHistory] = useState([]);
  const [weekDates, setWeekDates] = useState([]);
  const [currency, setCurrency] = useState(false); //false == local, true == usd
  const [vendor, setVendor] = useState(false); // false == ordered, true == shipped

  const [pages, setPages] = useState(null);
  const [pageNow, setPageNow] = useState(1);
  const [table, setTable] = useState(null);
  const [resetTable, setResetTable] = useState(false);
  const numberWithCommas = x => {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };
  useEffect(() => {
    let weeks = 52;
    let day1 = moment().format("YYYY-01-01");
    let weekList = [day1];
    // console.log({day1})
    setWeekDates([day1]);
    for (let i = 0; i < weeks; i++) {
      weekList.push(moment(day1, 'YYYY-MM-DD').add(i + 1, 'weeks').format('YYYY-MM-DD'));
      setWeekDates(weekList);
    }
    // console.log(weekList)
  }, []);
  return /*#__PURE__*/React.createElement(AppContext.Provider, {
    value: {
      test,
      clients,
      setClients,
      env,
      setEnv,
      data,
      setData,
      weekDates,
      setWeekDates,
      currency,
      setCurrency,
      vendor,
      setVendor,
      numberWithCommas,
      pages,
      setPages,
      pageNow,
      setPageNow,
      table,
      setTable,
      resetTable,
      setResetTable,
      dataHistory,
      setDataHistory
    }
  }, children);
};
const Tabulated = () => {
  const {
    useState,
    useEffect,
    useContext
  } = React;
  const context = useContext(AppContext);
  const {
    env,
    data,
    setData,
    weekDates,
    vendor,
    currency,
    numberWithCommas,
    table,
    setTable,
    clients,
    setClients,
    setResetTable,
    resetTable
  } = context;
  const [tableData, setTableData] = useState([]);
  const [currentPage, setCurrentPage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [noMoreData, setNoMoreData] = useState(false);
  let scroll = 0;
  let load = false;
  let page = 1;
  let listLimit = 20;
  let tableDataLocal = [];
  const createTableCols = () => {
    let initTable = new Tabulator('#table', {
      height: '80vh',
      reactiveData: true,
      data: tableDataLocal,
      groupBy: "childasin",
      placeholder: "Loading...",
      groupHeader: function (value, count, data, group) {
        // console.log({value, count, data, group})
        // console.log(data.filter( x => x.asin != "")[0].asin)	
        let title = data.filter(x => x.asin != "")[0];
        return title.asin;
      },
      selectableRows: false,
      columns: [{
        title: "ASIN Description",
        field: "asin",
        frozen: true,
        width: 150,
        formatter: 'html',
        headerSort: false
      }, {
        title: "(Child) ASIN",
        field: "childasin",
        frozen: true,
        headerSort: false
      }, {
        title: "Values",
        field: "values",
        frozen: true,
        headerSort: false
      }, ...(() => {
        let weeksArr = [];
        weekDates.forEach(x => {
          if (!moment(x).isSameOrAfter(new Date())) {
            weeksArr.push({
              title: x,
              field: x,
              headerSort: false
            });
          }
        });
        return weeksArr;
      })(), {
        title: "Grand Total",
        field: "total"
      }]
    });
    // console.log({createTableCols:initTable })
    setTable(initTable);
  };
  const createTableData = () => {
    let tableRowArr = [];
    let valueFormatter = (value, field) => {
      // return value
      if (["", null, undefined, 0, NaN, Infinity].includes(value)) return "";
      let fix = ['sessions', 'units'].includes(field) ? 0 : 1;
      let displayValue = isFinite(value) ? field == 'cvr' ? (value * 100).toFixed(fix) : value.toFixed(fix) : 0;
      return `${field == 'sales' ? '$' : ''}${numberWithCommas(displayValue)}${['cvr', 'cvr_total'].includes(field) ? '%' : ''}`;
    };

    // let valueFormatter = (cell, {field}, onRendered ) => {
    // 	return field
    // }

    let weekRows = (field, dataset, formatted) => {
      // console.log({weekRows: { field, client: dataset[0]['Client Title'], formatted}})

      let weeksArr = {};
      total = 0;
      for (let x in weekDates) {
        let value = valueCalculator(field, dataset, weekDates[x], context);
        let valueFormatted = valueFormatter(value, field);
        weeksArr[weekDates[x]] = formatted ? valueFormatted : value;
        total = total + value;
      }
      // if(fields == '') weeksArr['childasin'] = dataset[0]['(Child) ASIN']
      // else weeksArr['childasin'] = ""
      // console.log({childasin: dataset[0]['(Child) ASIN']})

      return {
        ...weeksArr,
        total: ['cvr', ''].includes(field) ? "" : formatted ? valueFormatter(total, field) : total
      };
    };

    // data.forEach( x => {
    let newData = data.filter(x => x.length > 0);
    for (let x in newData) {
      // console.log({dataX: x})
      let units = weekRows('units', newData[x], false),
        unitsFormatted = weekRows('units', newData[x], true);
      let sales = weekRows('sales', newData[x], false),
        salesFormatted = weekRows('sales', newData[x], true);
      let sessions = weekRows('sessions', newData[x], false),
        sessionsFormatted = weekRows('sessions', newData[x], true);
      let cvr = weekRows('cvr', newData[x], false),
        cvrFormatted = weekRows('cvr', newData[x], true);
      let asinHTML = () => `
				<div class="text-truncate fw-bold text-wrap"  title="${newData[x][0]['Product Name']}">
					${newData[x][0]['(Child) ASIN']} &bull; ${newData[x][0]['Product Name'] || `...`}  
				</div>`;
      let tableRow = [{
        asin: asinHTML(),
        // values: "",
        // ...weekRows('', null)
        childasin: newData[x][0]['(Child) ASIN'],
        values: "Units",
        ...unitsFormatted
      }, {
        asin: "",
        childasin: newData[x][0]['(Child) ASIN'],
        values: "Sales",
        ...sales
      }, {
        asin: "",
        childasin: newData[x][0]['(Child) ASIN'],
        values: "Sessions",
        ...sessionsFormatted
      }, {
        asin: "",
        childasin: newData[x][0]['(Child) ASIN'],
        values: "CVR",
        ...cvrFormatted,
        total: (() => {
          let show = isFinite(sessions.total / units.total);
          let res = valueFormatter(sessions.total / units.total, 'cvr_total');
          // let res =  sessions.total/units.total
          if (!show) return "";
          return res;
        })()
      }];

      // tableRowArr = [...tableRowArr, ...tableRow]
      tableRowArr.push(tableRow);

      // })
    }
    let newTable = [];
    let salesIndex = 1;
    // console.log({tableRowArr})
    tableRowArr.sort((a, b) => b[salesIndex].total - a[salesIndex].total);
    tableRowArr.forEach(x => {
      // x[2].total = valueFormatter(x[2].total, 'sales')

      Object.keys(x[salesIndex]).forEach(xx => {
        let valid = isFinite(x[salesIndex][xx]);
        x[salesIndex][xx] = !isFinite(x[salesIndex][xx]) ? x[salesIndex][xx] : valid ? valueFormatter(x[salesIndex][xx], 'sales') : 0;
      });
      newTable = [...newTable, ...x];
    });
    tableRowArr = newTable;

    // console.log({tableRowArr})
    // tableDataLocal = tableRowArr
    // setTableData(tableRowArr);
    // table.setData(tableDataLocal);

    return tableRowArr;
  };
  const createTableRows = () => {
    let newTableData = tableData;
    // console.log({newTableData1: newTableData})
    // newTableData = newTableData.concat(createTableData())
    newTableData = [...newTableData, ...createTableData()];
    // console.log({newTableData2: newTableData})
    console.log({
      newTableData
    });
    setTableData(newTableData);
  };
  const setCurrentPageHandler = () => {
    console.log("setting current page");
    page = currentPage + 1;
    setCurrentPage(page);
    // console.log({page})
  };
  const addData = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* () {
      console.log("adding data");
      // console.log(table)
      let from = listLimit * currentPage - listLimit,
        to = listLimit * currentPage;
      let pageList = clients.slice(from, to);
      console.log({
        pageList,
        clients,
        currentPage,
        from,
        to
      });
      if (clients.length < to) {
        console.log("client list length is less than next page count");
        setNoMoreData(true);
      }
      try {
        let newData = yield DOMO.getYearData(pageList);
        let newDataList = pageList.map(x => newData.filter(xx => xx['Product ID'] == x));
        newDataList = newDataList.filter(x => x.length > 0);
        console.log({
          newDataList
        });
        setData(newDataList);
      } catch (err) {
        console.log({
          err
        });
        // setData([])
      } finally {
        setLoading(false);
        load = false;
        // console.log({scrollPosition})

        // console.log(table.getRows("all"))
        // table.scrollTo("center")
      }
    });
    return function addData() {
      return _ref6.apply(this, arguments);
    };
  }();
  const triggerLoadData = top => {
    let offsetHeight = document.querySelector(".tabulator-table").offsetHeight;
    let trigger = offsetHeight * .75;
    // console.log({top, trigger, loadData: top  > trigger, loading })
    if (top > trigger && !loading) {
      setScrollPosition(top - 100);
      load = true;
      setLoading(true);
    }
  };
  const resetTableHandler = () => {
    console.log("reseting table data");
    setNoMoreData(false);
    setClients([]);
    setData([]);
    setTableData([]);
    setCurrentPage(null);
    setScrollPosition(0);
    setResetTable(false);
    table.clearData();
  };
  const getClientList = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator(function* () {
      console.log('getClientList');
      let list = yield DOMO.getClientTitles();
      console.log({
        getClientList: list
      });
      setClients(list);
      return;
    });
    return function getClientList() {
      return _ref7.apply(this, arguments);
    };
  }();
  useEffect(() => {
    console.log({
      dataLoaded: data
    });
    if (data.length >= listLimit && weekDates.length > 0) {
      // console.log({data})
      createTableRows();
      console.log("create table rows");
    }
    if (data.length < listLimit && !noMoreData) {
      console.log("list less than limit, loading more");
      console.log({
        dataLength: data.length
      });
      setCurrentPageHandler();
    }
  }, [data]);
  useEffect(() => {
    if (weekDates.length > 0) {
      console.log("create table columns");
      createTableCols();
    }
  }, [weekDates]);
  useEffect(() => {
    // let el = document.querySelector(".tabulator-tableholder")
    if (tableData.length > 0) {
      console.log('table data updated');
      console.log({
        tableData
      });
      tableDataLocal = tableData;
      // console.log({tableDataLocal})
      table.setData(tableDataLocal);
      document.querySelector(".tabulator-tableholder").scrollTop = scrollPosition;
      // el.scrollTo(0, scroll)
    }
  }, [tableData]);
  useEffect(() => {
    // console.log({currency, vendor})

    if (env && table) {
      resetTableHandler();
      // createTableRows ();
    }
    // (async () => {
    // 	await setResetTable(true)

    // })()
  }, [currency, vendor]);
  useEffect(() => {
    if (table) {
      table.hideColumn("childasin");
      table.hideColumn("asin");
      table.deleteColumn("childasin");
      table.deleteColumn("asin");
      console.log("deleting childasin, asin, columns");

      // console.log({table})
      table.on("scrollVertical", function (top) {
        //top - the current vertical scroll position

        let offsetHeight = document.querySelector(".tabulator-table").offsetHeight;
        let clientHeight = document.querySelector(".tabulator-table").clientHeight;
        let scrollHeight = document.querySelector(".tabulator-table").scrollHeight;
        // let scrollTop = document.querySelector(".tabulator-tableholder").scrollHeight
        let trigger = clientHeight * .75;
        // console.log({top, trigger, loading, condition: top  > trigger && !loading})
        // triggerLoadData(top, trigger)
        triggerLoadData(top);
      });
    }
  }, [table]);
  useEffect(() => {
    if (clients.length > 0) addData();
  }, [clients]);
  useEffect(() => {
    console.log({
      currentPage
    });
    if (currentPage == null) setCurrentPage(1);
    if (env && currentPage != null && table) {
      getClientList();
      // addData()
    }
  }, [currentPage]);
  useEffect(() => {
    console.log({
      loading
    });
    load = loading;
    // if(!loading && page > 1) {
    // 	let el = document.querySelector(".tabulator-tableholder")
    // 	el.scrollTo(0, scroll)
    // }
    if (loading) {
      console.log("trigger load data");
      setCurrentPageHandler();
    }
  }, [loading]);
  useEffect(() => {
    // console.log({context})
    scroll = scrollPosition;
  }, [scrollPosition]);
  useEffect(() => {
    if (resetTable) {
      resetTableHandler();
    }
  }, [resetTable]);
  useEffect(() => {
    console.log({
      noMoreData
    });
    createTableRows();
  }, [noMoreData]);
  return /*#__PURE__*/React.createElement("div", {
    id: "table",
    className: "my-1 border border-secondary"
  });
};
const Filters = () => {
  const {
    useState,
    useEffect,
    useContext
  } = React;
  const {
    currency,
    setCurrency,
    vendor,
    setVendor
  } = useContext(AppContext);
  useEffect(() => {
    // console.log({currency})
  }, [currency]);
  useEffect(() => {
    // console.log({vendor})
  }, [vendor]);
  return /*#__PURE__*/React.createElement("div", {
    class: "container-fluid"
  }, /*#__PURE__*/React.createElement("div", {
    className: "row "
  }, /*#__PURE__*/React.createElement("div", {
    className: "col-sm-12 col-md-6 col-lg-4 p-0"
  }, /*#__PURE__*/React.createElement("div", {
    className: "card m-1 text-bg-light"
  }, /*#__PURE__*/React.createElement("div", {
    className: "card-body  p-1 mx-1",
    style: {
      minHeight: 70
    }
  }, /*#__PURE__*/React.createElement("p", {
    className: "fw-bold mb-1"
  }, "USD / Local Currency Selector"), /*#__PURE__*/React.createElement("select", {
    onChange: e => setCurrency(e.target.value == 'usd' ? true : false),
    class: "form-select form-select-sm",
    defaultValue: currency ? 'usd' : 'local'
  }, /*#__PURE__*/React.createElement("option", {
    selected: true,
    value: "usd"
  }, "USD Converted"), /*#__PURE__*/React.createElement("option", {
    value: "local"
  }, "Marketplace Local Currency"))))), /*#__PURE__*/React.createElement("div", {
    className: "col-sm-12 col-md-6 col-lg-4  p-0"
  }, /*#__PURE__*/React.createElement("div", {
    className: "card m-1 text-bg-light"
  }, /*#__PURE__*/React.createElement("div", {
    className: "card-body  p-1 mx-1",
    style: {
      minHeight: 70
    }
  }, /*#__PURE__*/React.createElement("p", {
    className: "fw-bold mb-1"
  }, "Vendor OPS Model "), /*#__PURE__*/React.createElement("div", {
    class: "form-check form-check-inline"
  }, /*#__PURE__*/React.createElement("input", {
    defaultChecked: vendor,
    onChange: e => setVendor(true),
    class: "form-check-input",
    type: "radio",
    name: "vendor",
    id: "shipped",
    value: "shipped"
  }), /*#__PURE__*/React.createElement("label", {
    class: "form-check-label",
    for: "vendor"
  }, "Shipped COGs")), /*#__PURE__*/React.createElement("div", {
    class: "form-check form-check-inline"
  }, /*#__PURE__*/React.createElement("input", {
    defaultChecked: !vendor,
    onChange: e => setVendor(false),
    class: "form-check-input",
    type: "radio",
    name: "vendor",
    id: "ordered",
    value: "ordered"
  }), /*#__PURE__*/React.createElement("label", {
    class: "form-check-label",
    for: "vendor"
  }, "Order Revenue")))))));
};
const Pagination = () => {
  const {
    useState,
    useEffect,
    useContext
  } = React;
  const context = useContext(AppContext);
  const {
    setPageNow,
    pageNow,
    pages
  } = context;
  const setPageNowHandler = page => {
    console.log({
      page
    });
    setPageNow(page);
  };
  return /*#__PURE__*/React.createElement("ul", {
    className: "pagination pagination-sm"
  }, [...new Array(pages)].map((x, i) => /*#__PURE__*/React.createElement("li", {
    onClick: e => setPageNowHandler(i + 1),
    className: "page-item " + (pageNow == i + 1 ? 'active' : '')
  }, /*#__PURE__*/React.createElement("span", {
    className: "page-link"
  }, i + 1))));
};
const Index = () => {
  const {
    useState,
    useEffect,
    useContext
  } = React;
  const context = useContext(AppContext);
  const {
    test,
    env,
    setEnv,
    clients,
    setClients,
    data,
    setData,
    pages,
    setPages,
    setPageNow,
    pageNow,
    table,
    setResetTable,
    dataHistory,
    setDataHistory
  } = context;
  const [listLimit] = useState(20);
  const getClientList = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator(function* () {
      console.log('getClientList');
      let list = yield DOMO.getClientTitles();
      console.log({
        getClientList: list
      });
      setClients(list);
      setPageNow(1);
      return;
    });
    return function getClientList() {
      return _ref8.apply(this, arguments);
    };
  }();

  // const goToPage = () => {
  // 	table.clearData();
  // 	// console.log(table)
  // 	let from = (listLimit * pageNow) - listLimit, to = listLimit * pageNow
  // 	console.log({pageNow, from , to})
  // 	let pageList = clients.slice(from, to)
  // 	getData(pageList)
  // }

  const setPagesHandler = () => {
    console.log('setPageHandler');
    let listShow = listLimit;
    let pageCount = Math.ceil(clients.length / listShow);
    console.log({
      pageCount
    });
    setPages(pageCount);
    let page1 = clients.slice(0, listShow);
    getData(page1);
  };
  const getData = /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator(function* (list) {
      // console.log({getData: list})
      let data3 = yield DOMO.getYearData(list);
      // console.log({dataList: data3})

      let dataList = list.map(x => data3.filter(xx => xx['Product ID'] == x)).map(x => x.sort(function (a, b) {
        return new Date(b['Date String']) - new Date(a['Date String']);
      }));
      dataList = dataList.filter(x => x.length > 0);
      // console.log({dataList})
      // if(dataList.length < listLimit) {

      // 	return
      // }
      setData(dataList);
    });
    return function getData(_x5) {
      return _ref9.apply(this, arguments);
    };
  }();
  const getEnv = /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator(function* () {
      let resp = yield DOMO.getEnv();
      setEnv(resp);
    });
    return function getEnv() {
      return _ref10.apply(this, arguments);
    };
  }();
  const filterUpdates = () => {
    console.log("filterUpdates");
    setResetTable(true);
  };
  useEffect(() => {
    console.clear();
    DOMO.context = context;
    getEnv();
  }, []);

  // useEffect(() => {
  // 	console.log({data})
  // }, [data])

  useEffect(() => {
    console.log(env ? 'live' : 'not live');
    if (env) {
      DOMO.onFilterUpdate(getClientList, setData, filterUpdates);
      // DOMO.getColumns()
      getClientList();
    }
  }, [env]);
  useEffect(() => {
    // console.log({clients})
    // if(clients.length > 0) setPagesHandler()
  }, [clients]);
  useEffect(() => {
    if (pages) console.log({
      pages
    });
  }, [pages]);

  // useEffect(() => {
  // 	if(env && data.length > 0) {
  // 		goToPage()
  // 	}

  // }, [pageNow])

  return /*#__PURE__*/React.createElement("div", {
    className: "p-1"
  }, /*#__PURE__*/React.createElement(Filters, null), /*#__PURE__*/React.createElement(Tabulated, null));
};
ReactDOM.createRoot(document.getElementById("app")).render(/*#__PURE__*/React.createElement(AppContextProvider, null, /*#__PURE__*/React.createElement(Index, null)));