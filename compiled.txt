const DOMO = {
	context: null,
	addQuery: "",
	addColumn: "",
	columns:  [
        'Ordered Units - MFG',
        'Units Ordered',
        'Shipped Units - SRC',
        'Foreign - Ordered Product Sales (OPS)',
        'Foreign - Ordered Revenue - MFG',
        'Amazon Marketplace',
        'Foreign - Shipped COGS - SRC',
        'Ordered Product Sales (OPS)',
        'Ordered Revenue - MFG',
        'Product Name',
        'Sessions',
        'Glance Views',
        'Date String',
        "SKU",
        "Client SKU",
        "Client Title",
      	"Data Type ID",
      	"Product ID",
      	"(Child) ASIN"
        ],	

	getEnv: async () => {	
		let env = null

		try {
			env = domo.env 
		}catch(err) {
			
			env = false
		}
		// console.log(env)
		return env
	},
	countAllClients: async () => {
		 let counted = await domo.post('/sql/v1/dataset0',
	    // `SELECT COUNT("Product ID") as counted FROM dataset0 GROUP BY "Product ID"`, 
	    `SELECT COUNT(DISTINCT("Product ID")) AS count FROM dataset0 ${DOMO.addQuery}`,
		{contentType: 'text/plain'})

	    // console.log({counted})
	    return counted.rows[0][0];
	},
	getColumns: async () => {
		 let data = await domo.post('/sql/v1/dataset0',
	    `SELECT * from dataset0 limit 1`, 
	    {contentType: 'text/plain'})
		 // console.log({getColumns: data})
		 return data
	},
	// getClientTitles : async () => {
	//  	let client = []
	 	
	//     // let sql = `SELECT "Product ID" FROM dataset0 ${DOMO.addQuery} GROUP BY "Product ID"`
	//     let sql = `SELECT DISTINCT("Product ID") FROM dataset0 ${DOMO.addQuery}`
	//     // console.log({sql})

	//     let data = await domo.post('/sql/v1/dataset0',
	//     sql, 
	//     {contentType: 'text/plain'})
	//     console.log({getClientTitles: data})
	//     data = data.rows.map( x => x[0])
	//     // client = data.rows.map( x => x[2]).filter( x => x != '')	
	//     client = data.filter( x => ![undefined, null, ""].includes(x))

	//     console.log({client, sql})
	//     return client
	// },
	getClientTitles : async (limit, i) => {
		console.log("getting sql CLIENT data")
	 	let client = []
	 	
	    // let sql = `SELECT "Product ID" FROM dataset0 ${DOMO.addQuery} GROUP BY "Product ID"`
	    let sql = `SELECT DISTINCT("Product ID") FROM dataset0 ${DOMO.addQuery} limit ${limit} OFFSET ${i * limit} `
	    // console.log({sql})

	    let data = await domo.post('/sql/v1/dataset0',
	    sql, 
	    {contentType: 'text/plain'})
	    // console.log({getClientTitles: data})
	    data = data.rows.map( x => x[0])
	    // client = data.rows.map( x => x[2]).filter( x => x != '')	
	    client = data.filter( x => ![undefined, null, ""].includes(x))

	    // console.log({client, sql, data})
	    return client
	},
	getYearData :async (value) => {
		
		console.log("getting sql PRODUCT data")

		// let url = `/data/v1/dataset0?fields=${DOMO.columns.join(",")}&filter='SKU'=='${value}'`
		// // let url = `/data/v1/dataset0?fields=${DOMO.columns.join(",")}&filter='Product ID'==${value}`
		// let url = `/data/v1/dataset0?fields=${DOMO.columns.join(",")}&filter=Product ID in [${value.map(x => `'${x}'`).join(",")}]`
		// console.log({url})
		// let resp = await domo.get(url)
		// console.log({clientList: value})
		let sql = `SELECT 
					${DOMO.columns.map( x => `"${x}"`).join(",")} 
					FROM 
					dataset0 
					WHERE "Product ID" IN (${value.map( x => `'${x}'`).join(",")}) 
					AND "Data Type ID" IN (1,6) AND "Amazon Marketplace" = 'USA' ` 
		sql = sql.replaceAll("\n", " ").replaceAll("\t","")
		// console.log({clientList: value, query: sql})	
		 let resp = await domo.post('/sql/v1/dataset0',
	    sql, 
	    {contentType: 'text/plain'})

		 // console.log({dataColumns: resp.columns})
		 let dataArr = []
		 resp.rows.forEach( (x, i) => {
		 	let dataObj = {}
		 	x.forEach( (xx, ii) => {

		 		dataObj[resp.columns[ii]] = ["DOUBLE", "LONG"].includes(resp.metadata[ii].type) && resp.columns[ii] != "Product ID"  ? Number(xx) : xx
		 	})

		 	dataArr.push(dataObj)
		 })

		 resp = dataArr

		 // resp = resp.filter( x => x["Product ID"] != "")
		  // console.log({resp})
		 return resp
		
		 // let data = []
		//  data = resp.sort(function(a,b){
        //     return new Date(b['Date String']) - new Date(a['Date String']);
        // });
		 // console.log({data})
		// return data

	},
	onFilterUpdate: async () => {
		domo.onFiltersUpdate(e => {
			let operandWord = [
				"GREATER_THAN", 
				"GREAT_THAN_EQUALS_TO",
				"LESS_THAN",
				"LESS_THAN_EQUALS_TO",
				"BETWEEN",
				"EQUALS",
				"NOT_EQUALS",
				"IN"
			];
			let operandSql = [">",">=","<","<=","BETWEEN","=","<>","IN"];


			let includeList = []
			let queryList = []
			let columnList = []

			if(e.length == 0) {
				

				DOMO.addQuery = ""
				DOMO.addColumn = ""
			
				return
			}

			e.forEach( x => {
				let operand = -1
				operandWord.forEach( (xx, ii) => {
					if(xx == x.operand) operand = ii
				})
				let formatValue = x.values;
				if(x.operand == "IN") {
					formatValue = `${(typeof x.values == "object") ? `(${x.values.map(xxx =>( typeof xxx) == 'string' ? `'${xxx}'`: xxx).join(",")})` : x.values}` 
				}
				if(x.operand  == "BETWEEN") {
					formatValue =  `${x.values[0]} AND ${x.values[1]}`
				}
				queryList.push(`"${x.column}" ${operandSql[operand]} ${formatValue}` )
				columnList.push(x.column)

			})


			queryList = queryList.join(" AND ")
			DOMO.addQuery =  `WHERE ${queryList}`
			DOMO.addColumn = (() => {
				let columnString = "";
				if(columnList.length > 0) {
					columnString = `,${columnList.map( x => `"${x}"`).join(",")}`
				}
				return columnList
			})()
		})
	}
	// onFilterUpdate: async (setData, filterUpdates, setClientsLoaded) => {

	// 	domo.onFiltersUpdate( e =>  {	
	// 		setClientsLoaded(false)
			
	// 		let operandWord = [
	// 			"GREATER_THAN", 
	// 			"GREAT_THAN_EQUALS_TO",
	// 			"LESS_THAN",
	// 			"LESS_THAN_EQUALS_TO",
	// 			"BETWEEN",
	// 			"EQUALS",
	// 			"NOT_EQUALS",
	// 			"IN"
	// 		];

	// 		let operandSql = [">",">=","<","<=","BETWEEN","=","<>","IN"]

	// 		let includeList = []
	// 		let queryList = []
	// 		let columnList = []
	
	// 		if(e.length == 0) {
				
	// 			console.log("no filters")
	// 			DOMO.addQuery = ""
	// 			DOMO.addColumn = ""
	// 			// getClientList()
	// 			filterUpdates()
	// 			return
	// 		}
			
	// 		e.forEach( x => {
	// 			let operand = -1
	// 			operandWord.forEach( (xx, ii) => {
	// 				if(xx == x.operand) operand = ii
	// 			})
	// 			let formatValue = x.values;
	// 			if(x.operand == "IN") {
	// 				formatValue = `${(typeof x.values == "object") ? `(${x.values.map(xxx =>( typeof xxx) == 'string' ? `'${xxx}'`: xxx).join(",")})` : x.values}` 
	// 			}
	// 			if(x.operand  == "BETWEEN") {
	// 				formatValue =  `${x.values[0]} AND ${x.values[1]}`
	// 			}
	// 			queryList.push(`"${x.column}" ${operandSql[operand]} ${formatValue}` )
	// 			columnList.push(x.column)
	// 			// console.log({operand, word: x.operand, sql: operandSql[operand], formatValue, values: x.values})
	// 		})

	// 		// console.log(queryList.join(" AND "), e)
	// 		queryList = queryList.join(" AND ")
	// 		DOMO.addQuery =  `WHERE ${queryList}`
	// 		DOMO.addColumn = (() => {
	// 			let columnString = "";
	// 			if(columnList.length > 0) {
	// 				columnString = `,${columnList.map( x => `"${x}"`).join(",")}`
	// 			}
	// 			return columnList
	// 		})()
	// 		// getClientList()
	// 		filterUpdates()

	// 	})
	// 	return
	// }
}


const valueCalculator =  (field, dataset, week, context) => {

	if(field == '' || dataset == null  ) {
		return ''
	}

	const { vendor, currency} = context

	// console.log({ vendor, currency})

	
	dataset =  dataset.filter( x => {

		let date = week

		let date1 = new Date(date), from = new Date(date).getTime()
		let to = new Date(date1.setDate(date1.getDate()+7)).getTime()
		let xdate = new Date(x["Date String"]).getTime() 

		if(isNaN(xdate)) return false

		// console.log({from, to, xdate, in: xdate >= from && xdate <= to})
		return from <= xdate && to >= xdate
	})

	// console.log({field, dataset, week, vendor})	

	if(field == 'units') {

		let val1 = 0, val2 = 0

		if(!vendor) {
			// console.log({field, currency, vendor})
			val1 = dataset.map( x => x['Units Ordered'] ? x['Units Ordered'] : 0)
			val2 = dataset.map( x => x['Ordered Units - MFG'] ? x['Ordered Units - MFG'] : 0)

		}
		if(vendor) {
			// console.log({field, currency, vendor})
			val1 = dataset.map( x => x['Units Ordered'] ? x['Units Ordered'] : 0)
			val2 = dataset.map( x => x['Ordered Units - MFG'] ? x['Shipped Units - SRC'] : 0)
		}

		
		
		val1 = val1.reduce((partialSum, a) => partialSum + a, 0)
		val2 = val2.reduce((partialSum, a) => partialSum + a, 0)

		// console.log({field,val1, val2, sum: val1+ val2, week})

		return val1+val2
	}




	if(field == 'sales') {

		let val1 = 0, val2 = 0

		if(!currency && !vendor) {
			val1 = dataset.map( x => x['Foreign - Ordered Product Sales (OPS)'] ? x['Foreign - Ordered Product Sales (OPS)'] : 0)
			val2 = dataset.map( x => x['Foreign - Ordered Revenue - MFG'] ? x['Foreign - Ordered Revenue - MFG'] : 0)

		}

		if(currency && !vendor) {

			val1 = dataset.map( x => x['Foreign - Ordered Product Sales (OPS)'] ? x['Foreign - Ordered Product Sales (OPS)'] : 0)
			val2 = dataset.map( x => x['Foreign - Shipped COGS - SRC'] ? x['Foreign - Shipped COGS - SRC'] : 0)
		}

		if(currency && vendor) {
			val1 = dataset.map( x => x['Ordered Product Sales (OPS)'] ? x['Ordered Product Sales (OPS)'] : 0)
			val2 = dataset.map( x => x['Ordered Revenue - MFG'] ? x['Ordered Revenue - MFG'] : 0)

		}

		if(!currency && vendor) {
			val1 = dataset.map( x => x['Ordered Product Sales (OPS)'] ? x['Ordered Product Sales (OPS)'] : 0)
			val2 = dataset.map( x => x['Shipped COGS - SRC'] ? x['Shipped COGS - SRC'] : 0)

		}

		val1 = val1.reduce((partialSum, a) => partialSum + a, 0)
		val2 = val2.reduce((partialSum, a) => partialSum + a, 0)


		// console.log({field,val1, val2, sum: val1+ val2})
		return val1 + val2

	}

	if(field == 'sessions') {


		let val1 = dataset.map( x => x['Sessions'] ? x['Sessions'] : 0),
			val2 = dataset.map( x => x['Glance Views'] ? x['Glance Views'] : 0)

			val1 = val1.reduce((partialSum, a) => partialSum + a, 0)
			val2 = val2.reduce((partialSum, a) => partialSum + a, 0)

			// console.log({field,val1, val2, sum: val1+ val2})
			return val1+val2	


	}

	if(field == 'cvr') {

		let dividen = {
			val1: 0, val2: 0, sum: 0
		}
		let divisor = {
			val1: 0, val2: 0, sum: 0
		}

		dividen.val1 = dataset.map( x => x['Units Ordered'] ? x['Units Ordered'] : 0)
		dividen.val2 = dataset.map( x => x['Ordered Units - MFG'] ? x['Ordered Units - MFG'] : 0)

		divisor.val1 = dataset.map( x => x['Sessions'] ? x['Sessions'] : 0)
		divisor.val2 = dataset.map( x => x['Glance Views'] ? x['Glance Views'] : 0)

		dividen.val1 = dividen.val1.reduce((partialSum, a) => partialSum + a, 0)
		dividen.val2 = dividen.val2.reduce((partialSum, a) => partialSum + a, 0)

		divisor.val1 = divisor.val1.reduce((partialSum, a) => partialSum + a, 0)
		divisor.val2 = divisor.val2.reduce((partialSum, a) => partialSum + a, 0)

		dividen.sum = dividen.val1 + dividen.val2
		divisor.sum = divisor.val1 + divisor.val2	

		// return `${dividen.sum} / ${divisor.sum}`
		// console.log({field, dividen, divisor, product: dividen.sum/divisor.sum})
		return isFinite(dividen.sum/divisor.sum) ? (dividen.sum/divisor.sum) : ""



	}

	


}

const grandTotal = (field, data) => {

	if(field == 'units') {

	}

	if(field == 'sales') {

	}

	if(field == 'sessions'){

	}

	if(field == 'cvr') {

	}

}
const AppContext = React.createContext()

const AppContextProvider = ({children}) => {

	const {useState, useEffect} = React

	const [env, setEnv] = useState(null);
	const [clients, setClients] = useState([])

	const [currency, setCurrency] = useState(false)//false == local, true == usd
	const [vendor, setVendor] = useState(false)// false == ordered, true == shipped

	const [table, setTable] = useState(null)
	const [weekDates, setWeekDates] = useState([])

	const [pageList, setPageList] = useState(null)
	const [pageNow, setPageNow] = useState(0)
	const [pageLimit] = useState(100)

	const [tableLoading, setTableLoading] = useState(false)


	const numberWithCommas = (x) => {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

	useEffect(() => {
		let weeks = 52
		let day1 = moment().format("YYYY-01-01")
		let weekList = [day1]
		// console.log({day1})
		setWeekDates([day1])
		for(let i =0; i< weeks; i++) {
			
			weekList.push(moment(day1, 'YYYY-MM-DD').add(i+1, 'weeks').format('YYYY-MM-DD'))
			setWeekDates(weekList)
		}
		// console.log(weekList)
	},[])



	return (
		<AppContext.Provider value={{
			env, setEnv,
			currency, setCurrency,
			vendor, setVendor,
			table, setTable,
			weekDates, setWeekDates,
			pageList, setPageList,
			pageNow, setPageNow, pageLimit, 
			numberWithCommas,
			tableLoading, setTableLoading,
			clients, setClients

		}} >
			{children}
		</AppContext.Provider>

	)
}
const TabulatedPagination = () => {

	const {useEffect, useState, useContext} = React
	const context = useContext(AppContext)

	const {
		env,
		table, setTable,
		weekDates, setWeekDates,
		pageList, setPageList,
		pageLimit, pageNow,
		numberWithCommas,
		tableLoading, setTableLoading,
		clients, setClients,
	} = context;

	const [clientsCount, setClientsCount] = useState(null)


	const [loadFunctions, setLoadFunctions] = useState([])
	const [clientListLoaded, setClientListLoaded] = useState(false)
	const [rawData, setRawData] = useState([])
	const [tableData, setTableData] = useState([])

	const createTableCols = () => {
		console.log("creating table")
		let initTable = new Tabulator('#table', {
			height: '80vh',
			reactiveData: true,
			data: [],
			groupBy: "childasin" ,
			 placeholder:"Loading...",
			 groupHeader:function(value, count, data, group) {
			
			 	let title = data.filter( x => x.asin != "")[0];
			 	return title.asin ;

			 },
			
			 selectableRows:false,
			columns: [

				{title: "Values", field: "values", frozen: true,  headerSort: false, formatter: (cell) => {
					cell.getElement().classList.add("fw-bold")
					return cell.getValue()
				}},
				
				...(() => {
					let weeksArr = []

					weekDates.forEach( x => {
						if(!moment(x).isSameOrAfter(new Date())) {
							weeksArr.push({title: x, field: x, headerSort: false	})
						}
						
					})

					return weeksArr
				})(),
				{title: "Grand Total", field: "total", headerSort: false, },

				],
		
		})


		setTable(initTable)
		
	}

	const getClientList = async () => {

		let limit = 10000;
		let count = await DOMO.countAllClients()
		console.log({count_getClientList: count})
		setClientsCount(count)
		
		let chunks = Math.ceil(count/limit)
		// console.log(count/limit)
		console.log({chunks})
		let functionsArray = []
		for(let i = 0; i < chunks; i++) {
	
			functionsArray.push( () => DOMO.getClientTitles(limit, i))
		}

		let firstBatch = await functionsArray[0]()
		// console.log(loadFunctions.length)

		setClients(firstBatch)
		functionsArray.shift()
		setLoadFunctions(functionsArray)

		// console.log(functionsArray.length)
		return
	}

	const setPagesListHandler = () => {
		console.log("setting page list")
		let pages = Math.ceil(clientsCount / pageLimit);
		setPageList(pages)
	}

	const loadRestClientList = async () => {
		console.log("load rest client data")

		Promise.all(loadFunctions.map( x => x())).then( result => {

			let restClients = result.flat(1)

			setClients([...clients, ...restClients])
			
		})
	}	

	const loadData = async () => {
		console.log("loading data")
		// console.log(table)
		let from = (pageLimit * pageNow) , to = (pageLimit * pageNow) + pageLimit;

		let list = clients.slice(from, to)

		console.log({from, to, list})
		// return
		try {
			let newData = await DOMO.getYearData(list)
			let newDataList = list.map( x => newData.filter( xx => xx['Product ID'] == x))

			// newDataList = newDataList.filter( x => x.length > 0)

			

			setRawData([...rawData, ...newDataList])

		} catch (err) {
			console.log({err})
		
		}finally{


		}
	}

	const createTableData = () => {
		// console.log({createTableData: data})

		let tableRowArr = [];
		let valueFormatter = (value, field) => {
			// return value
			if (["", null, undefined, 0, NaN, Infinity].includes(value)) return "";
			let fix = ['sessions', 'units'].includes(field) ? 0 : 1;
			let displayValue = isFinite(value) ? field == 'cvr' ? (value * 100).toFixed(fix) : value.toFixed(fix) : 0;
			return `${field == 'sales' ? '$' : ''}${numberWithCommas(displayValue)}${['cvr', 'cvr_total'].includes(field) ? '%' : ''}`;
		};



		let weekRows = (field, dataset, formatted) => {


			let weeksArr = {};
			total = 0;
			for (let x in weekDates) {
				let value = valueCalculator(field, dataset, weekDates[x], context);
				let valueFormatted = valueFormatter(value, field);

				weeksArr[weekDates[x]] = formatted ? valueFormatted : value;
				total = total + value;
			}


			return {
				...weeksArr,
				total: ['cvr', ''].includes(field) ? "" : formatted ? valueFormatter(total, field) : total
			};
		
		};

		// data.forEach( x => {
		let newData = rawData.filter(x => x.length > 0);
		for (let x in newData) {

			// console.log({dataX: x})
			let units = weekRows('units', newData[x], false),
			unitsFormatted = weekRows('units', newData[x], true);
			let sales = weekRows('sales', newData[x], false),
			salesFormatted = weekRows('sales', newData[x], true);
			let sessions = weekRows('sessions', newData[x], false),
			sessionsFormatted = weekRows('sessions', newData[x], true);
			let cvr = weekRows('cvr', newData[x], false),
			cvrFormatted = weekRows('cvr', newData[x], true);


			let name = newData[x][0]['Product Name'] || "",
				asin = newData[x][0]['(Child) ASIN'] || "",
				market = newData[x][0]['Amazon Marketplace'] || "";

			let asinHTML = () => `
				<div class="text-truncate fw-bold text-wrap"  title="${name}">
					${asin} &bull; ${market} &bull; ${name || "...."}  
				</div>`;

			let tableRow = [
				{asin: asinHTML(0),childasin: asin ,values: "Units",...unitsFormatted}, 
				{asin: null, childasin: asin,values: "Sales",...sales,}, 
				{asin: null, childasin: asin ,values: "Sessions",...sessionsFormatted}, 
				{asin: null, childasin: asin ,values: "CVR",...cvrFormatted, total: (() => {
					let show = isFinite(sessions.total / units.total);
					let res = valueFormatter(sessions.total / units.total, 'cvr_total');
					// let res =  sessions.total/units.total
					if (!show) return "";
					return res;
				})()
			}];

			// tableRowArr = [...tableRowArr, ...tableRow]
			tableRowArr.push(tableRow);

			// })
		}
		let newTable = [];
		let salesIndex = 1
		// tableRowArr = tableRowArr.sort( (a,b) => a.total - b.total)
		tableRowArr.forEach(x => {
			// x[2].total = valueFormatter(x[2].total, 'sales')


			Object.keys(x[salesIndex]).forEach(xx => {
				let valid = isFinite(x[salesIndex][xx]);
				x[salesIndex][xx] = !isFinite(x[salesIndex][xx]) ? x[salesIndex][xx] : valid ? valueFormatter(x[salesIndex][xx], 'sales') : 0;
			});
			newTable = [...newTable, ...x];
		});
		tableRowArr = newTable;

		console.log({tableRowArr})
		setTableData(tableRowArr)
		
		return tableRowArr
	}

	const resetTable = () => {
		if(env) {
			setRawData([])
			setTableData([])
			table.setData([])
		}
		
	}

	useEffect(() => {

		if(weekDates.length > 0) createTableCols ();

	}, [weekDates])

	useEffect(() => {
		if(table && env) getClientList()
	}, [table, env])

	useEffect(() => {
			
		if(!clientListLoaded && clients.length > 0) {

			console.log({clients})
			
			setPagesListHandler()
			setClientListLoaded(true)

		}
		
	}, [clients])

	useEffect(() => {
		
		if(clientListLoaded) {
			loadRestClientList()
		} 
	}, [clientListLoaded])

	// useEffect(() => {
		
	// 	if(loadFunctions.length > 0) {

	// 		loadRestClientList()
	// 	}
	// }, [loadFunctions])

	useEffect(() => {
		console.log({pageList})
		if(pageList > 0 ) loadData ();
	}, [pageList])

	useEffect(() => {
		console.log({rawData})
		// if(rawData.length < pageLimit) {

		// }
		if(table && rawData.length > 0) {

			table.setData(createTableData())
		} 
	}, [rawData])

	useEffect(() => {
		
		// console.log("sorting table...");
		// if(table) {
		// 	table.setSort([
		// 	    {column:"total", dir:"desc"}, //sort by this first
			    
		// 	]);
		// }
		if(table && tableData.length > 0) {
			console.log("table loaded")
			setTableLoading(false)
		}
		
		
	}, [tableData])

	useEffect(() => {
		console.log({pageNow})
		resetTable()
		loadData()
	}, [pageNow])

	return (
		<div>
	
			<div id="table"></div>
		</div>
	)	
}
const Filters = () => {

	const { useState, useEffect, useContext} = React
	const { currency, setCurrency, vendor, setVendor} = useContext(AppContext)


	useEffect(() => {
		// console.log({currency})
	}, [currency])
	useEffect(() => {
		// console.log({vendor})
	}, [vendor])

	return (
		<div class="container-fluid">
			<div className="row ">

				<div className="col-sm-12 col-md-6 col-lg-4 p-0">
					<div className="card m-1 text-bg-light">
					  <div className="card-body  p-1 mx-1"  style={{minHeight: 70}}>
					    <p className="fw-bold mb-1">USD / Local Currency Selector</p>
					    <select 
					    onChange={(e) => setCurrency(e.target.value == 'usd' ? true:false)}
					    class="form-select form-select-sm" 
					    defaultValue={currency ? 'usd': 'local'}>
							<option selected value="usd">USD Converted</option>
							<option value="local">Marketplace Local Currency</option>
							
						</select>
					  </div>
					</div>
				</div>
				<div className="col-sm-12 col-md-6 col-lg-4  p-0">
					<div className="card m-1 text-bg-light">
					  <div className="card-body  p-1 mx-1" style={{minHeight: 70}}>
					    <p className="fw-bold mb-1">Vendor OPS Model	</p>
					    	<div class="form-check form-check-inline">
								<input 
								defaultChecked={vendor }
								onChange={e => setVendor( true ) }
								class="form-check-input" type="radio" name="vendor" id="shipped" value="shipped"/>
								<label class="form-check-label" for="vendor">Shipped COGs</label>
							</div>
							<div class="form-check form-check-inline">
								<input 
								defaultChecked={!vendor}
								onChange={e => setVendor( false ) }
								class="form-check-input" type="radio" name="vendor" id="ordered" value="ordered"/>
								<label class="form-check-label" for="vendor">Order Revenue</label>
							</div>
							
					  </div>
					</div>
				</div>

				{/*<div className="col-sm-12 col-md-12 col-lg-4  p-0 ">
					<div class="card m-1 text-bg-light">
					  <div class="card-body  p-1 mx-1">
					    This is some text within a card body.
					  </div>
					</div>
				</div>*/}

			</div>
		</div>

	)
}
const Pagination = () => {

	const {useState, useEffect, useContext} = React
	const context = useContext(AppContext)
	const { pageNow, setPageNow, pageList, setPageList, pageLimit,tableLoading, setTableLoading, clients } = context

	const [showSelectPage, setShowSelectPage] = useState(false)
	const [page, setPage] = useState(null)
	const [error, setError] = useState(false)


	const setPageNowHandler = (to) => {
		setTableLoading(true)
		console.log({to})
		let newPageNow = pageNow;
		if(to == 'prev') {
			if(newPageNow < 1) return;
			newPageNow --
		}
		if(to == 'next') {
			if(newPageNow >= pageList) return;
			newPageNow++
		}
		setPageNow(newPageNow)
		
	}

	const cancelSetPage = () => {
		setError(false)
		setPage(pageNow + 1)
		 setShowSelectPage(false)
	}

	const goToPage = () => {
		setError(false)
		if(page < 1) {
			console.log("page less than 1")
			setError(true)
			return;
		}
		if(page >= pageList) {
			console.log("page more than pageLimit")
			setError(true)
			return
		}

		setPageNow(page - 1)
		setShowSelectPage(false)
	}

	useEffect(() => {
		console.log({tableLoading})
	}, [tableLoading])

	useEffect(() => {
		console.log({showSelectPage})

	}, [showSelectPage])

	useEffect(() => {
		setPage(pageNow + 1)
	}, [pageNow])


	return (
		<div className="d-flex gap-1 justify-content-between">
			<div>
				<p>clients: {clients ? clients.length : null}, pages: {pageList}</p>
			</div>
			<div className="d-flex gap-1 ">
				{/*{error && "error"}*/}
				<button disabled={tableLoading} className = "btn btn-light btn-sm my-1" onClick={() => setPageNowHandler('prev')}> {"<"} </button>
				{!showSelectPage ? <button className = "btn btn-light disabled btn-sm my-1" >{ pageNow + 1 } </button> : null}
				{showSelectPage ?
				<div className="d-flex gap-1">
					<div className="align-self-center">
						<input 
						value={page} 
						onChange={ e => setPage(e.target.value)}  
						type="number" 
						className={"form-control form-control-sm " +(error?"is-invalid":null)}
						style={{width: 80}} />
					</div>
					<button onClick={() => goToPage()} className = "btn btn-primary btn-sm my-1" >&#10003;</button>
					<button onClick={() => cancelSetPage()} className = "btn btn-secondary btn-sm  my-1" >&#10005;</button>
				</div>
				:
				<button onClick={() => setShowSelectPage(true)} title={"select page"} disabled={tableLoading} className = "btn btn-light btn-sm my-1">...</button> 
				}
				

				<span className="align-self-center"> / </span>
				<button className = "btn btn-light disabled btn-sm my-1">{pageList || "..."}</button>
				<button disabled={tableLoading} className = "btn btn-light btn-sm my-1" onClick={() => setPageNowHandler('next')}> {">"} </button>
			</div>
		</div>
	)
}
const Index = () => {

	const {useState, useEffect, useContext} = React
	const context = useContext(AppContext)
	const {
		env, setEnv,
			currency, setCurrency,
			vendor, setVendor
		
	} = context

	const getEnv = async () => {
		let resp = await DOMO.getEnv()
		setEnv(resp)
	}

	const filterUpdates = () => {
		console.log("filterUpdates")
		setResetTable(true)
	}

	

	useEffect(() => {
		console.clear()
		DOMO.context = context
		getEnv()
	}, [])

	
	useEffect(() => {
		console.log(env ? 'live':'not live')
		if(env) {
			// DOMO.onFilterUpdate(setData, filterUpdates, setClientsLoaded)
			// setResetTable(true)

			DOMO.onFilterUpdate()
		}
	}, [env])


	return (
		<div className="p-1">
			<Filters />
			{/*<Tabulated />*/}
			
			<TabulatedPagination/>
			<Pagination />
		</div>
	)	
}

ReactDOM.createRoot(document.getElementById("app")).render(
	<AppContextProvider>
		<Index />
	</AppContextProvider>
)
